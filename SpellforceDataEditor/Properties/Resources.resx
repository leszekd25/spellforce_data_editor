<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="fshader_skel" xml:space="preserve">
    <value>in vec3 fragmentPosition;
in vec2 UV;
in vec3 fragmentNormal;
in vec4 fragmentPositionLightSpace;

out vec4 color;

uniform mat4 M;
uniform float SunStrength;
uniform vec3 SunDirection;
uniform vec4 SunColor;
uniform float AmbientStrength;
uniform vec4 AmbientColor;
uniform sampler2D DiffuseTex;
uniform sampler2D ShadowMap;
uniform vec4 FogColor;
uniform float FogStart;
uniform float FogEnd;
uniform float ShadowDepth;

vec2 poissonDisk[4] = vec2[](
  vec2( -0.94201624, -0.39906216 ),
  vec2( 0.94558609, -0.76890725 ),
  vec2( -0.094184101, -0.92938870 ),
  vec2( 0.34495938, 0.29387760 )
);

float linstep(float low, float high, float v)
{
    return clamp((v-low)/(high-low), 0.0, 1.0);
}

// From http://fabiensanglard.net/shadowmappingVSM/index.php
float chebyshevUpperBound(vec3 proj)
{
	vec2 moments = texture2D(ShadowMap, proj.xy).rg;

	float variance = max(moments.y - (moments.x*moments.x), 0.000002);

	float d = proj.z - moments.x;
                   float p = float(proj.z &lt;= moments.x);
	float p_max = variance / (variance + d*d);

	return max(p, linstep(0.5, 1.0, p_max));// clamp((p_max * 1.3)-0.3, 0.0, 1.0);
}

float CalculateShadow(vec4 FPLS, float b){
    vec3 ProjectionCoordinates = FPLS.xyz / FPLS.w;
    if(ProjectionCoordinates.z &gt; 1.0)
        return 1.0;

    ProjectionCoordinates = ProjectionCoordinates * 0.5 + 0.5;
    return chebyshevUpperBound(ProjectionCoordinates);
}


void main(){
  vec4 temp_c = texture(DiffuseTex, UV);
  if (temp_c.a == 0.0)
    discard;

  float brightness = 1.0;
  #ifdef APPLY_SHADING
    // calculate brightness resulting from light coming from sun
    mat3 normalMatrix = transpose(inverse(mat3(M)));
    vec3 normal = normalize(normalMatrix * fragmentNormal);
    vec3 fragVec = fragmentPosition;
    brightness = dot(normal, SunDirection); // both vectors are normalized
    // calculate shadow
    brightness = min(brightness, CalculateShadow(fragmentPositionLightSpace, brightness));
    brightness = clamp(brightness, 0, 1);  
  #endif // APPLY_SHADING

  // calculate output color
  vec4 ambient_color = AmbientColor * AmbientStrength;
  vec4 sun_color = SunColor * SunStrength;
  color = (ambient_color*(1-brightness))+(sun_color*brightness);
  color.a = 1.0;
  color = color*temp_c;
  color = clamp(color, 0.0, 1.0);

  // fog calculation
  float dist = gl_FragCoord.z / gl_FragCoord.w;
  float fog_factor = clamp((dist - FogStart)/(FogEnd-FogStart), 0.0, 1.0);
  color = mix(color, FogColor, fog_factor);
}</value>
  </data>
  <data name="vshader_skel" xml:space="preserve">
    <value>// Input vertex data, different for all executions of this shader.
layout(location = 0) in vec3 vertexPosition_modelspace;
layout(location = 1) in vec3 vertexNormal;
layout(location = 2) in vec4 vertexBoneWeight;
layout(location = 3) in vec2 vertexUV;
layout(location = 4) in vec4 vertexBoneIndex;

out vec3 fragmentPosition;
out vec2 UV;
out vec3 fragmentNormal;
out vec4 fragmentPositionLightSpace;

// Values that stay constant for the whole mesh.
uniform mat4 P;
uniform mat4 V;
uniform mat4 LSM;
uniform mat4 M;
uniform mat4 boneTransforms[224];
  
void main(){
  vec4 Vertex;
  vec4 newVertex;
  vec4 Normal;
  vec4 newNormal;
  int index;

  Vertex = vec4(vertexPosition_modelspace, 1.0);
  Normal = vec4(vertexNormal, 0.0);
  newVertex = vec4(0.0, 0.0, 0.0, 1.0);
  newNormal = vec4(0.0, 0.0, 0.0, 0.0);

  index = int(vertexBoneIndex.x);
  newVertex = (boneTransforms[index] * Vertex) * vertexBoneWeight.x;
  newNormal = (boneTransforms[index] * Normal) * vertexBoneWeight.x;

  index = int(vertexBoneIndex.y);
  newVertex = (boneTransforms[index] * Vertex) * vertexBoneWeight.y + newVertex;
  newNormal = (boneTransforms[index] * Normal) * vertexBoneWeight.y + newNormal;

  index = int(vertexBoneIndex.z);
  newVertex = (boneTransforms[index] * Vertex) * vertexBoneWeight.z + newVertex;
  newNormal = (boneTransforms[index] * Normal) * vertexBoneWeight.z + newNormal;

  index = int(vertexBoneIndex.w);
  newVertex = (boneTransforms[index] * Vertex) * vertexBoneWeight.w + newVertex;
  newNormal = (boneTransforms[index] * Normal) * vertexBoneWeight.w + newNormal;

  
  // Output position of the vertex, in clip space : MVP * position
  gl_Position =  P * V * M * vec4(newVertex.xyz, 1.0);
  fragmentPositionLightSpace = LSM * M * vec4(newVertex.xyz, 1);
  fragmentPosition = newVertex.xyz;
  UV = vertexUV;
  fragmentNormal = vec3(newNormal);
}</value>
  </data>
  <data name="vshader" xml:space="preserve">
    <value>// Input vertex data, different for all executions of this shader.
layout(location = 0) in vec3 vertexPosition_modelspace;
layout(location = 1) in vec3 vertexNormal;
layout(location = 2) in vec4 vertexColor;
layout(location = 3) in vec2 vertexUV;
layout(location = 4) in mat4 instanceMatrix;

out vec3 fragmentPosition;
out vec3 fragmentNormal;
out vec4 fragmentColor;
out vec2 UV;
out vec4 fragmentPositionLightSpace;
out mat4 M;

// Values that stay constant for the whole mesh.
//uniform mat4 M;
uniform mat4 VP;
uniform mat4 LSM;
  
void main(){
  M = instanceMatrix;
  // Output position of the vertex, in clip space : MVP * position
  gl_Position = VP * M * vec4(vertexPosition_modelspace,1);
  fragmentPositionLightSpace = LSM * M * vec4(vertexPosition_modelspace, 1);
  fragmentPosition = vec3(M * vec4(vertexPosition_modelspace, 1));
  UV = vertexUV;
  fragmentNormal = vertexNormal;
  fragmentColor = vertexColor;
}</value>
  </data>
  <data name="vshader_overlay" xml:space="preserve">
    <value>// Input vertex data, different for all executions of this shader.
layout(location = 0) in vec3 vertexPosition_modelspace;

out vec4 fragmentColor;

// Values that stay constant for the whole mesh.
uniform mat4 MVP;
uniform vec4 Color;
  
void main(){
  // Output position of the vertex, in clip space : MVP * position
  gl_Position = MVP * vec4(vertexPosition_modelspace,1);
  fragmentColor = Color;
}</value>
  </data>
  <data name="fshader" xml:space="preserve">
    <value>in vec3 fragmentPosition;
in vec3 fragmentNormal;
in vec2 UV;
in vec4 fragmentColor;
in vec4 fragmentPositionLightSpace;
in mat4 M;

out vec4 color;

//uniform mat4 M;
uniform float SunStrength;
uniform vec3 SunDirection;
uniform vec4 SunColor;
uniform float AmbientStrength;
uniform vec4 AmbientColor;
uniform sampler2D DiffuseTex;
uniform sampler2D ShadowMap;
uniform vec4 FogColor;
uniform float FogStart;
uniform float FogEnd;
uniform float DepthBias;
uniform float ShadowDepth;

vec2 poissonDisk[4] = vec2[](
  vec2( -0.94201624, -0.39906216 ),
  vec2( 0.94558609, -0.76890725 ),
  vec2( -0.094184101, -0.92938870 ),
  vec2( 0.34495938, 0.29387760 )
);

float linstep(float low, float high, float v)
{
    return clamp((v-low)/(high-low), 0.0, 1.0);
}

// From http://fabiensanglard.net/shadowmappingVSM/index.php
float chebyshevUpperBound(vec3 proj)
{
	vec2 moments = texture2D(ShadowMap, proj.xy).rg;

	float variance = max(moments.y - (moments.x*moments.x), 0.000002);

	float d = proj.z - moments.x;
                   float p = float(proj.z &lt;= moments.x);
	float p_max = variance / (variance + d*d);

	return max(p, linstep(0.5, 1.0, p_max));// clamp((p_max * 1.3)-0.3, 0.0, 1.0);
}

float CalculateShadow(vec4 FPLS, float b){
    vec3 ProjectionCoordinates = FPLS.xyz / FPLS.w;
    if(ProjectionCoordinates.z &gt; 1.0)
        return 1.0;

    ProjectionCoordinates = ProjectionCoordinates * 0.5 + 0.5;
    return chebyshevUpperBound(ProjectionCoordinates);
}


void main(){
  vec4 tex_col = texture(DiffuseTex, UV);
  if(tex_col.a &lt; 0.5)
    discard;
  tex_col.a = 1.0;
  vec4 temp_c = fragmentColor * texture(DiffuseTex, UV);

  float brightness = 1.0;
  #ifdef APPLY_SHADING
    // calculate brightness resulting from light coming from sun
    mat3 normalMatrix = transpose(inverse(mat3(M)));
    vec3 normal = normalize(normalMatrix * fragmentNormal);
    vec3 fragVec = fragmentPosition;
    brightness = dot(normal, SunDirection); // both vectors are normalized
    // calculate shadow
    brightness = min(brightness, CalculateShadow(fragmentPositionLightSpace, brightness));
    brightness = clamp(brightness, 0, 1);  
  #endif // APPLY_SHADING


  // calculate output color
  vec4 ambient_color = AmbientColor * AmbientStrength;
  vec4 sun_color = SunColor * SunStrength;
  color = (ambient_color*(1-brightness))+(sun_color*brightness);
  color.a = 1.0;
  color = color*temp_c;
  color = clamp(color, 0.0, 1.0);

  // fog calculation
  float dist = gl_FragCoord.z / gl_FragCoord.w;
  float fog_factor = clamp((dist - FogStart)/(FogEnd-FogStart), 0.0, 1.0);
  color = mix(color, FogColor, fog_factor);

  // depth bias
  gl_FragDepth = gl_FragCoord.z + DepthBias;
}</value>
  </data>
  <data name="fshader_overlay" xml:space="preserve">
    <value>in vec4 fragmentColor;

out vec4 color;

void main(){
  color = fragmentColor;
}</value>
  </data>
  <data name="fshader_hmap" xml:space="preserve">
    <value>in vec3 fragmentPosition;
in vec2 UV;
in vec3 fragmentNormal;
in vec4 fragmentPositionLightSpace;
in vec3 vpos_orig;

out vec4 color;

uniform mat4 M;

uniform int GridSize;
uniform vec4 GridColor;
uniform float SunStrength;
uniform vec3 SunDirection;
uniform vec4 SunColor;
uniform float AmbientStrength;
uniform vec4 AmbientColor;
uniform vec4 FogColor;
uniform float FogStart;
uniform float FogEnd;
uniform float ShadowDepth;

uniform sampler2DArray myTextureSampler;
uniform sampler2D ShadowMap;
uniform sampler2D TileMap;
uniform sampler2D OverlayMap;
layout(std140) uniform Tiles
{
  ivec4 tex_id[255];
  ivec4 tex_w[255];
};
layout(std140) uniform Overlays
{
  vec4 ov_colors[16];
};

vec2 poissonDisk[4] = vec2[](
  vec2( -0.94201624, -0.39906216 ),
  vec2( 0.94558609, -0.76890725 ),
  vec2( -0.094184101, -0.92938870 ),
  vec2( 0.34495938, 0.29387760 )
);

vec2 gridDisk[4] = vec2[](
  vec2( -0.5, -0.5 ),
  vec2( 0.5, -0.5 ),
  vec2( -0.5, 0.5 ),
  vec2( 0.5, 0.5 )
);

vec4 hmap_visualization_colors[3] = vec4[](
  vec4(0.3, 0, 0, 1.0),
  vec4(0, 0.3, 0, 1.0),
  vec4(0, 0, 0.3, 1.0)
);

float linstep(float low, float high, float v)
{
    return clamp((v-low)/(high-low), 0.0, 1.0);
}

// From http://fabiensanglard.net/shadowmappingVSM/index.php
float chebyshevUpperBound(vec3 proj)
{
	vec2 moments = texture2D(ShadowMap, proj.xy).rg;

	float variance = max(moments.y - (moments.x*moments.x), 0.000002);

	float d = proj.z - moments.x;
                   float p = float(proj.z &lt;= moments.x);
	float p_max = variance / (variance + d*d);

	return max(p, linstep(0.0, 1.0, p_max));
}

float CalculateShadow(vec4 FPLS, float b){
    vec3 ProjectionCoordinates = FPLS.xyz / FPLS.w;
    if(ProjectionCoordinates.z &gt; 1.0)
        return 1.0;

    ProjectionCoordinates = ProjectionCoordinates * 0.5 + 0.5;
    return chebyshevUpperBound(ProjectionCoordinates);
}

float CalculateGridIntensity(float x, float y, float d)
{
    float linewidth = 0.001*d;
    float dx = x-round(x);
    float dy = y-round(y);
    dx = abs(dx);
    dy = abs(dy);
    dx = linewidth+max(dx-0.5, -linewidth);
    dy = linewidth+max(dy-0.5, -linewidth);
    return min(1, 2000*(dx+dy));
}

void main(){
  float gridintensity = 0;
  #ifdef DISPLAY_GRID
    float depth = gl_FragCoord.z / gl_FragCoord.w;
    for(int i = 0; i &lt; 4; i++)
    {
    float gx = vpos_orig.x+gridDisk[i].x/1000*depth;
    float gy = vpos_orig.y+gridDisk[i].y/1000*depth;
    gridintensity += CalculateGridIntensity(gx, gy, depth);
    }
    gridintensity += CalculateGridIntensity(vpos_orig.x, vpos_orig.y, depth)*2;
    gridintensity /= 6;
  #endif // DISPLAY_GRID

  #ifdef VISUALIZE_HEIGHT
    float height = vpos_orig.z;
    float c = ((height/2)-floor(height/2))*0.3;
    highp int col_index = int(mod(height/2, 3));
    color = clamp(hmap_visualization_colors[col_index]+vec4(c, c, c, 1.0), 0.0, 1.0);
    color = mix(color, vec4(1, 1, 1, 1), gridintensity);
    return;
  #endif // VISUALIZE_HEIGHT
  
  #ifndef VISUALIZE_HEIGHT
  // calculate brightness resulting from light coming from sun
  mat3 normalMatrix = transpose(inverse(mat3(M)));
  vec3 normal = normalize(normalMatrix * fragmentNormal);
  vec3 fragVec = fragmentPosition;
  //float brightness = (dot(normal, SunDirection)*1.4)-0.4; // both vectors are normalized
  float brightness = dot(normal, SunDirection); // both vectors are normalized
    // calculate shadow
  float calc_shadow = CalculateShadow(fragmentPositionLightSpace, brightness);
  //if(calc_shadow &lt; 1.0)
  //{
  //    color = vec4(1.0f, 1.0f, 0.0f, 1.0f);
  //    return;
  //}
  brightness = min(brightness, calc_shadow);
  brightness = clamp(brightness, 0, 1);
  brightness = pow(brightness, 0.6);

  // calculate diffuse color based on heightmap textures
  vec2 map_uv = floor(UV*4);
  map_uv.y = GridSize-map_uv.y-1;
  int t1 = int(texture(TileMap, (map_uv+vec2(0, -1))/GridSize).r*255);
  int t2 = int(texture(TileMap, (map_uv+vec2(1, -1))/GridSize).r*255);
  int t3 = int(texture(TileMap, (map_uv+vec2(0, 0))/GridSize).r*255);
  int t4 = int(texture(TileMap, (map_uv+vec2(1, 0))/GridSize).r*255);
  vec4 tex1_1 = texture(myTextureSampler, vec3(UV, tex_id[t1].x))*(tex_w[t1].x/255.0f);
  vec4 tex1_2 = texture(myTextureSampler, vec3(UV, tex_id[t1].y))*(tex_w[t1].y/255.0f);
  vec4 tex1_3 = texture(myTextureSampler, vec3(UV, tex_id[t1].z))*(tex_w[t1].z/255.0f);
  vec4 tex2_1 = texture(myTextureSampler, vec3(UV, tex_id[t2].x))*(tex_w[t2].x/255.0f);
  vec4 tex2_2 = texture(myTextureSampler, vec3(UV, tex_id[t2].y))*(tex_w[t2].y/255.0f);
  vec4 tex2_3 = texture(myTextureSampler, vec3(UV, tex_id[t2].z))*(tex_w[t2].z/255.0f);
  vec4 tex3_1 = texture(myTextureSampler, vec3(UV, tex_id[t3].x))*(tex_w[t3].x/255.0f);
  vec4 tex3_2 = texture(myTextureSampler, vec3(UV, tex_id[t3].y))*(tex_w[t3].y/255.0f);
  vec4 tex3_3 = texture(myTextureSampler, vec3(UV, tex_id[t3].z))*(tex_w[t3].z/255.0f);
  vec4 tex4_1 = texture(myTextureSampler, vec3(UV, tex_id[t4].x))*(tex_w[t4].x/255.0f);
  vec4 tex4_2 = texture(myTextureSampler, vec3(UV, tex_id[t4].y))*(tex_w[t4].y/255.0f);
  vec4 tex4_3 = texture(myTextureSampler, vec3(UV, tex_id[t4].z))*(tex_w[t4].z/255.0f);
  tex1_1 += tex1_2+tex1_3;
  tex2_1 += tex2_2+tex2_3;
  tex3_1 += tex3_2+tex3_3;
  tex4_1 += tex4_2+tex4_3;
  float xt = (UV*4).x-map_uv.x;
  float yt = (UV*4).y-(GridSize-map_uv.y-1);
  vec4 col1 = tex2_1*xt+tex1_1*(1-xt);
  vec4 col2 = tex4_1*xt+tex3_1*(1-xt);
  vec4 temp_c = col1*yt+col2*(1-yt);
  temp_c.a = 1.0;

  // calculate output color (lightning)
  vec4 ambient_color = AmbientColor * AmbientStrength;
  vec4 sun_color = SunColor * SunStrength;
  color = (ambient_color*(1-brightness))+(sun_color*brightness);
  color = color*temp_c;
  color = clamp(color, 0.0, 1.0);
  color.a = 1.0;

  // overlay
  vec2 fixed_UV = (UV*4);
  fixed_UV.y = GridSize-fixed_UV.y;
  int ov_col_index = int(texture(OverlayMap, (fixed_UV+vec2(0.5, -0.5))/float(GridSize)).r*255);
  vec4 ov_col_final = ov_colors[ov_col_index];
  color = mix(color, ov_col_final, 0.7*ov_col_final.a);

  // grid
  color = mix(color, GridColor, gridintensity);

  // fog calculation
  float dist = gl_FragCoord.z / gl_FragCoord.w;
  float fog_factor = clamp((dist - FogStart)/(FogEnd-FogStart), 0.0, 1.0);
  color = mix(color, FogColor, fog_factor);
  #endif // VISUALIZE_HEIGHT
}</value>
  </data>
  <data name="vshader_hmap" xml:space="preserve">
    <value>// Input vertex data, different for all executions of this shader.
layout(location = 0) in vec3 vertexPosition_modelspace;
layout(location = 1) in vec3 vertexNormal;
//layout(location = 2) in vec3 texID;
//layout(location = 3) in vec3 texWeight;

out vec3 fragmentPosition;
out vec2 UV;
out vec3 fragmentNormal;
//flat out vec3 textureID;
out vec4 fragmentPositionLightSpace;
out vec3 vpos_orig;

// Values that stay constant for the whole mesh.
uniform mat4 VP;
uniform mat4 LSM;
uniform mat4 M;

// each vertex of a quad has a different texW
  
void main(){
  // Output position of the vertex, in clip space : MVP * position
  gl_Position = VP * M * vec4(vertexPosition_modelspace,1);
  fragmentPositionLightSpace = LSM * M * vec4(vertexPosition_modelspace, 1);
  UV = vertexPosition_modelspace.xz/4;
  fragmentPosition = vertexPosition_modelspace;
  fragmentNormal = vertexNormal;
  //textureID = texID;
  vpos_orig = vertexPosition_modelspace.xzy;
}</value>
  </data>
  <assembly alias="System.Windows.Forms" name="System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
  <data name="building_icon" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\building_icon.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="decoration_icon" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\decoration_icon.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="flag_icon" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\flag_icon.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="hmap_icon" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\hmap_icon.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="lake_icon" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\lake_icon.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="metadata_icon" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\metadata_icon.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="monument_icon" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\monument_icon.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="npc_icon" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\npc_icon.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="object_icon" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\object_icon.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="texture_icon" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\texture_icon.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="unit_icon" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\unit_icon.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="fshader_framebuffer_simple" xml:space="preserve">
    <value>out vec4 FragColor;
  
in vec2 TexCoords;

uniform sampler2D screenTexture;
uniform int renderShadowMap;
uniform float ZNear;
uniform float ZFar;

float LinearizeDepth(float z)
{
  return (2.0 * ZNear) / (ZFar + ZNear - z * (ZFar- ZNear));	
}

void main()
{
    // this is for shadowmap
    if(renderShadowMap == 1)
    {
        float color = LinearizeDepth(texture(screenTexture, TexCoords).r);
        FragColor = vec4(color, color, color, 1.0);
    }
    else
    {
        // this is for final render
        FragColor = texture(screenTexture, TexCoords);
    }
}</value>
  </data>
  <data name="vshader_framebuffer" xml:space="preserve">
    <value>layout (location = 0) in vec2 aPos;
layout (location = 1) in vec2 aTexCoords;

out vec2 TexCoords;

void main()
{
    gl_Position = vec4(aPos.x, aPos.y, 0.0, 1.0); 
    TexCoords = aTexCoords;
}</value>
  </data>
  <data name="fshader_shadowmap" xml:space="preserve">
    <value>in vec2 UV;
uniform sampler2D DiffuseTexture;

out vec4 col;

void main()
{
    if(texture(DiffuseTexture, UV).a &lt; 0.5)
        discard;

    float depth = gl_FragCoord.z;

    float dx = dFdx(depth);
    float dy = dFdy(depth);
    float moment2 = depth * depth + 0.25 * (dx * dx + dy * dy);
    
    col = vec4(depth, moment2, 1.0, 1.0);
}</value>
  </data>
  <data name="vshader_shadowmap" xml:space="preserve">
    <value>// Input vertex data, different for all executions of this shader.
layout(location = 0) in vec3 vertexPosition_modelspace;
layout(location = 1) in vec3 vertexNormal;
layout(location = 2) in vec4 vertexColor;
layout(location = 3) in vec2 vertexUV;
layout(location = 4) in mat4 instanceMatrix;

out vec2 UV;

uniform mat4 LSM;  // light space matrix

void main()
{
    gl_Position = LSM * instanceMatrix * vec4(vertexPosition_modelspace, 1.0);
    UV = vertexUV;
}</value>
  </data>
  <data name="vshader_shadowmap_animated" xml:space="preserve">
    <value>// Input vertex data, different for all executions of this shader.
layout(location = 0) in vec3 vertexPosition_modelspace;
layout(location = 1) in vec3 vertexNormal;
layout(location = 2) in vec4 vertexBoneWeight;
layout(location = 3) in vec2 vertexUV;
layout(location = 4) in vec4 vertexBoneIndex;

out vec2 UV;

// Values that stay constant for the whole mesh.
uniform mat4 LSM;
uniform mat4 M;
uniform mat4 boneTransforms[224];
  
void main(){
  vec4 Vertex;
  vec4 newVertex;
  int index;

  Vertex = vec4(vertexPosition_modelspace, 1.0);
  newVertex = vec4(0.0, 0.0, 0.0, 1.0);

  index = int(vertexBoneIndex.x);
  if(index != -1)
  {
    newVertex = (boneTransforms[index] * Vertex) * vertexBoneWeight.x;
  }
  index = int(vertexBoneIndex.y);
  if(index != -1)
  {
    newVertex = (boneTransforms[index] * Vertex) * vertexBoneWeight.y + newVertex;
  }
  index = int(vertexBoneIndex.z);
  if(index != -1)
  {
    newVertex = (boneTransforms[index] * Vertex) * vertexBoneWeight.z + newVertex;
  }
  index = int(vertexBoneIndex.w);
  if(index != -1)
  {
    newVertex = (boneTransforms[index] * Vertex) * vertexBoneWeight.w + newVertex;
  }

  
  // Output position of the vertex, in clip space : MVP * position
  gl_Position =  LSM * M * vec4(newVertex.xyz, 1.0);
  UV = vertexUV;
}</value>
  </data>
  <data name="vshader_shadowmap_heightmap" xml:space="preserve">
    <value>// Input vertex data, different for all executions of this shader.
layout(location = 0) in vec3 vertexPosition_modelspace;
layout(location = 1) in vec3 vertexNormal;
layout(location = 2) in vec2 vertexUV;

out vec2 UV;

// Values that stay constant for the whole mesh.
uniform mat4 LSM;
uniform mat4 M;
  
void main(){
  // Output position of the vertex, in clip space : MVP * position
  gl_Position = LSM * M* vec4(vertexPosition_modelspace,1);
  UV = vertexUV;
}</value>
  </data>
  <data name="fshader_ui" xml:space="preserve">
    <value>in vec2 UV;
in vec4 color;

out vec4 out_color;

uniform sampler2D Tex;

void main(){
  vec4 temp_c;
  temp_c = texture(Tex, UV);
  if(temp_c.a == 0.0)
    discard;

  out_color = temp_c * color;
}</value>
  </data>
  <data name="vshader_ui" xml:space="preserve">
    <value>// Input vertex data, different for all executions of this shader.
layout(location = 0) in vec3 vertexPosition_modelspace;
layout(location = 1) in vec2 vertexUV;
layout(location = 2) in vec4 vertexColor;

out vec2 UV;
out vec4 color;

uniform vec2 offset;
uniform vec2 ScreenSize;
  
void main(){
  // Output position of the vertex, in clip space : MVP * position
  
  vec2 real_pos = vec2(vertexPosition_modelspace.x+offset.x - (ScreenSize.x/2), -(vertexPosition_modelspace.y + offset.y - (ScreenSize.y/2)))*2;
  gl_Position = vec4(real_pos/ScreenSize, vertexPosition_modelspace.z, 1.0);

  UV = vertexUV;
  color = vertexColor;
}</value>
  </data>
  <data name="fshader_shadowmap_blur" xml:space="preserve">
    <value>out vec4 FragColor;
  
in vec2 TexCoords;

uniform sampler2D image;
  
uniform bool horizontal;
uniform float weight[3] = float[] (0.250301, 0.221461, 0.153388);

void main()
{             
    vec2 tex_offset = 1.0 / textureSize(image, 0); // gets size of single texel
    vec2 result = texture(image, TexCoords).rg * weight[0]; // current fragment's contribution
    if(horizontal)
    {
        for(int i = 1; i &lt; 3; ++i)
        {
            result += texture(image, TexCoords + vec2(tex_offset.x * i, 0.0)).rg * weight[i];
            result += texture(image, TexCoords - vec2(tex_offset.x * i, 0.0)).rg * weight[i];
        }
    }
    else
    {
        for(int i = 1; i &lt; 3; ++i)
        {
            result += texture(image, TexCoords + vec2(0.0, tex_offset.y * i)).rg * weight[i];
            result += texture(image, TexCoords - vec2(0.0, tex_offset.y * i)).rg * weight[i];
        }
    }
    FragColor = vec4(result, 1.0, 1.0);
}</value>
  </data>
</root>